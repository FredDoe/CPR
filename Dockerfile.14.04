#FROM mechtaev/ubuntu-16.04-llvm-3.8.1
FROM ubuntu:14.04

ARG DEBIAN_FRONTEND=noninteractive

RUN apt-get update && apt-get upgrade -y && apt-get autoremove -y

RUN apt-get install -y build-essential \
                       gcc \
                       patch \
                       curl \
                       wget \
                       libcap-dev \
                       git \
                       cmake \
                       libncurses5-dev \
                       nano \
                       python-minimal \
                       python-pip \
                       python3 \
                       psmisc  \
                       python3-pip \
                       unzip \
                       libtcmalloc-minimal4 \
                       libgoogle-perftools-dev \
                       libssl-dev \
                       zlib1g-dev \
                       vim \
                       jq \
                       tar \
                       moreutils \
                       zip \
                       python3-setuptools \
                       python \
                       software-properties-common \
                       gcovr \
                       libncurses5-dev

# WORKDIR /home
# RUN mkdir clang-llvm
# WORKDIR /home/clang-llvm
# RUN git clone https://github.com/llvm/llvm-project.git && \
#     git clone https://github.com/martine/ninja.git && \
#     git clone https://github.com/Kitware/CMake.git
# WORKDIR /home/clang-llvm/ninja
# RUN git checkout release && ./bootstrap.py && \
#     cp ninja /usr/bin/

# WORKDIR /home/clang-llvm/CMake
# RUN git checkout release && ./bootstrap && make && make install

# WORKDIR /home/clang-llvm/llvm-project
# RUN mkdir build && cd build && \
#   cmake -G Ninja ../llvm -DLLVM_ENABLE_PROJECTS="clang;clang-tools-extra" -DLLVM_BUILD_TESTS=ON && \
#   ninja && ninja check && ninja clang-test && ninja install



ENV LLVM_VERSION=6.0

#RUN apt-get install -y clang-${LLVM_VERSION} \
#                       llvm-${LLVM_VERSION} \
#                       llvm-${LLVM_VERSION}-dev \
#                       llvm-${LLVM_VERSION}-tools

# Install clang-6.0
WORKDIR /home
RUN mkdir clang-6.0
WORKDIR /home/clang-6.0
RUN wget https://releases.llvm.org/6.0.0/clang+llvm-6.0.0-x86_64-linux-gnu-ubuntu-14.04.tar.xz
RUN tar xfv clang+llvm-6.0.0-x86_64-linux-gnu-ubuntu-14.04.tar.xz
WORKDIR /home/clang-6.0/clang+llvm-6.0.0-x86_64-linux-gnu-ubuntu-14.04
RUN cp -R * /usr/local/
RUN rm /home/clang-6.0/clang+llvm-6.0.0-x86_64-linux-gnu-ubuntu-14.04.tar.xz

# Install python3.6
WORKDIR /home
RUN mkdir python3.6
WORKDIR /home/python3.6
RUN wget https://www.python.org/ftp/python/3.6.3/Python-3.6.3.tgz
RUN tar -xvf Python-3.6.3.tgz
WORKDIR /home/python3.6/Python-3.6.3
RUN ./configure --enable-optimizations
RUN make -j8 build_all
RUN make install

# Install Z3
ENV Z3_VERSION=4.8.4
WORKDIR /z3
RUN wget -qO- https://github.com/Z3Prover/z3/archive/z3-${Z3_VERSION}.tar.gz | tar xz --strip-components=1 && \
    python scripts/mk_make.py && \
    cd build && \
    make && \
    make install

# Prepare KLEE UCLIBC
ENV PATH=/usr/lib/llvm-${LLVM_VERSION}/bin/:${PATH}
ENV KLEE_UCLIBC_VERSION=klee_0_9_29
WORKDIR /klee-uclibc
RUN git clone https://github.com/klee/klee-uclibc.git . && \
    git checkout ${KLEE_UCLIBC_VERSION} && \
    CC=clang ./configure --make-llvm-lib && \
    make -j2
ENV KLEE_VERSION=2.0

# Install GCC-5
RUN add-apt-repository ppa:ubuntu-toolchain-r/test
RUN apt-get update
RUN apt-get install -y gcc-5 g++-5
RUN update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-5 60 --slave /usr/bin/g++ g++ /usr/bin/g++-5

# Install KLEE
WORKDIR /klee
RUN git clone https://github.com/rshariffdeen/klee.git source; cd source; git checkout concolic
RUN mkdir build && \
    cd build && \
    cmake \
        -DENABLE_SOLVER_Z3=ON \
        -DENABLE_POSIX_RUNTIME=ON \
        -DENABLE_KLEE_UCLIBC=ON \
        -DKLEE_UCLIBC_PATH=/klee-uclibc \
        -DENABLE_UNIT_TESTS=OFF \
        -DENABLE_SYSTEM_TESTS=OFF \
            ../source && \
    make
ENV PATH=/klee/build/bin/:${PATH}

ENV LLVM_COMPILER=clang

RUN add-apt-repository ppa:deadsnakes/ppa \
    && apt-get update \
    && apt-get install -y python3.6 bear

RUN python3.6 -m pip --disable-pip-version-check --no-cache-dir install pylint
RUN python3.6 -m pip --disable-pip-version-check --no-cache-dir install wllvm && \
    python3.6 -m pip --disable-pip-version-check --no-cache-dir install pysmt
RUN pysmt-install --z3 --confirm-agreement
RUN python3.6 -m pip --disable-pip-version-check --no-cache-dir install funcy
RUN python3.6 -m pip --disable-pip-version-check --no-cache-dir install six
RUN python3.6 -m pip --disable-pip-version-check --no-cache-dir install numpy

# Copy experiment files.
WORKDIR /concolic-repair
COPY main/ main/
COPY lib/ lib/
COPY tools/  tools/
COPY tests/ tests/
COPY components/ components/

RUN cd lib && KLEE_INCLUDE_PATH=/klee/source/include make

# add execution permissions
#RUN chmod +x /concolic-repair/tools/trident-cc
#RUN chmod +x /concolic-repair/tools/trident-cxx
#RUN chmod +x /concolic-repair/tests/assignment/run
#RUN chmod +x /concolic-repair/tests/iterations/run
#RUN chmod +x /concolic-repair/tests/multipath/run
#RUN chmod +x /concolic-repair/tests/simple-rvalue/run
ENV DEBIAN_FRONTEND=dialog
ENV TRIDENT_CC=/concolic-repair/tools/trident-cc
ENV TRIDENT_CXX=/concolic-repair/tools/trident-cxx

RUN cd /klee/build/lib; ar rcs libkleeRuntest.a libkleeRuntest.so.1.0

## install LowFat
#RUN git clone https://github.com/GJDuck/LowFat.git /lowfat && \
#    cd /lowfat; bash build.sh

# install experiment dependencies
RUN apt-get update && apt-get install -y  \
    autopoint \
    automake \
    bison \
    flex \
    gettext \
    gperf \
    libass-dev \
    libfreetype6 \
    libfreetype6-dev \
    libjpeg-dev \
    libtool \
    libxml2-dev \
    liblzma-dev \
    nasm \
    pkg-config \
    texinfo \
    yasm \
    xutils-dev \
    libpciaccess-dev \
    libx11-dev \
    libxcb-xfixes0-dev \
    libxcb1-dev \
    libxcb-shm0-dev \
    libsdl1.2-dev  \
    libvdpau-dev \
    libnuma-dev

# install additional dependencies by Chris
RUN sudo apt-get update && \
    sudo apt-get install --no-install-recommends -y subversion \
                                                    m4 \
                                                    libglib2.0-dev \
                                                    libxml2-dev \
                                                    libsqlite3-dev \
                                                    libldap-dev \
                                                    libbz2-dev \
                                                    libssl-dev \
                                                    libgdbm-dev

RUN update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-4.8 60 --slave /usr/bin/g++ g++ /usr/bin/g++-4.8
